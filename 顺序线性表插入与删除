#pragma warning( disable : 4996)
#include<stdio.h>
#include<iostream>
#include<stdlib.h>
using namespace std;
// #define OVERFLOW 0
#define OK 1
#define ERROR 0
#define LIST_INIT_SIZE 100
typedef int Elemtype;
typedef int Status;
typedef struct{
	Elemtype *data;
	int Length;
}Sqlist;
Status CreatList(Sqlist& L){
	L.data= (int*)malloc(LIST_INIT_SIZE*sizeof(Elemtype));  //malloc函数返回指向分配区域的指针
	printf("请输入数值对顺序表进行初始化\n");
	Elemtype e; int i = 0; L.Length = 0;
	while (cin >> e && L.Length<=LIST_INIT_SIZE){
		L.data[i++]= e;
		L.Length++;
	}
	return OK;
}
Status ListInsert(Sqlist& L,int i,Elemtype e){
	if (L.Length == LIST_INIT_SIZE)
		return ERROR;
	if (i<1 || i>L.Length)
		return ERROR;
	if (i<L.Length){
		for (int k = L.Length - 1; k >= i - 1; k--)
		L.data[k + 1] = L.data[k];
	}
	L.data[i - 1] = e;
	L.Length++;
	return OK;
}
Status ListDelete(Sqlist& L,int i, Elemtype e){
	if (L.Length == 0)
		return ERROR;
	if (i<1 || i>L.Length)
		return ERROR;
	e = L.data[i - 1];
	if (i<L.Length){
		for (int k =i; k <= L.Length; k++)
			L.data[k-1] = L.data[k];
	}
	L.Length--;
	return OK;
}
int main(){
	Sqlist L; Elemtype e = 0;
	CreatList(L);
	ListInsert(L,3,0);
	ListDelete(L,2,e);
	for (int k = 0; k <= L.Length-1; k++)
		printf("%d\n", L.data[k]);
	printf("%d\n", L.Length);
	return 0;
}
