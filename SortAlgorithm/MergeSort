//非递归实现归并排序，减少空间复杂度
//归并函数
void Merge(int SR[], int TR[], int i, int m, int n){
	int j = 0, k = 0,l = 0;
	for (j = m + 1, k = i; i <= m &&j <= n; k++){
		if (SR[i] < SR[j])
			TR[k] = SR[i++];
		else
			TR[k] = SR[j++];
	}
	if (i <= m){    //此时j = n，因此i补充至m
		for (l = 0; i + l <= m; l++)   
			TR[k + l] = SR[i + l];
	}
	else if (j <= n){
		for (l = 0; j + l <= n; l++)
			TR[k + l] = SR[j + l];
	}
}
void MergePass(int SR[], int TR[], int s, int n){
	int i = 1;
	while (i<=n-2*s+1){
		Merge(SR, TR, i, i + s - 1, i + 2 * s - 1);
		i = i + 2 * s;
	}
	if (i < n - s + 1)   //是否还剩余两个子序列可以归并,即i与n之间相差个数为s
		Merge(SR,TR,i,i+s-1,n);
	else{
		for (int j = i; j <=n ;j++)
			TR[j] = SR[j];
	}
}
//顺序表L.data[0]仍设为哨兵
void MergeSort(SqList &L){
	int *TR = (int*)malloc(L.length*sizeof(int));  //构造归并序列
	int k = 1;
	while (k < L.length-1){
		MergePass(L.data,TR,k,L.length-1);
		k = k * 2;
		MergePass(TR, L.data, k, L.length-1);  //将TR中已经两两归并的有序序列再次归并回顺序表中
		k = k * 2;
	}
	for (int i = 1; i < L.length; i++)
		printf("%d ", TR[i]);
}
