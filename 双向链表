#include<iostream>
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ERROR 0
#define OK 1
typedef int Elemtype;
typedef int Status;
typedef struct DulNode{
	Elemtype data;
	DulNode* prior;
	DulNode* next;
}DulNode;
typedef DulNode* DLL;
Status Init_DLL_Head(DLL &d, int n){
	d = (DulNode*)malloc(sizeof(DulNode));
	d->data = n;    //头结点存储了链表长度
	d->next = NULL;
	d->prior = NULL;
	srand(time(0));
	DLL p;
	for (int i = 0; i < n; i++){
		p = (DLL)malloc(sizeof(DulNode));
		p->data = rand() % 100 + 1;
		p->next = d->next;
		p->prior = d;
		if (d->next !=NULL)
		d->next->prior = p;
		d->next = p;
	}
 	return OK;
}
Status Init_DLL_Tail(DLL &d, int n){
	d = (DulNode*)malloc(sizeof(DulNode));
	d->data = n;
	d->prior = NULL;
	srand(time(0));
	DLL p, s = d;
	for (int i = 0; i < n; i++){
		p = (DLL)malloc(sizeof(DulNode));
		p->data = rand() % 100 + 1;
		s->next = p;
		p->prior = s;
		s = p;
	}
	s->next = NULL;
	return OK;
}
Status Clear_DLL(DLL &d){
	DLL p = d->next, q;
	while (p){
		q = p->next;
		free(p);
		p = q;
	}
	d->next= NULL;
	return OK;
}
Status Insert_DLL(DLL &d, int i, Elemtype e){
	DLL p = d, q; int j = 1;
	while (p && j < i){
		p = p->next;
		++j;
	}
	if (!p || j>i)
		return ERROR;
	q = (DLL)malloc(sizeof(DulNode));
	q->data = e;
	q->next = p->next;
	q->prior = p;
	p->next->prior = q;
	p->next = q;
	return OK;
}
Status Delete_DLL(DLL &d, int i, Elemtype e){
	DLL p = d, q; int j = 1;
	while (p->next && j < i){
		p = p->next;
		++j;
	}
	if (!p->next || j>i)
		return ERROR;
	q = p->next;
	e = q->data;
	q->next->prior= p;
	p->next = q->next;
	free(q);
	return OK;
}
void show_DLL(DLL &d){
	DLL p = d->next;
	while (p){
		printf("%d\n", p->data);
		p = p->next;
	}
}
int main(){
	DLL d; int n = 5, i = 3; Elemtype e = 0,f = 33;
	Init_DLL_Head(d,n);
	show_DLL(d);
	Insert_DLL(d,i,e);
	show_DLL(d);
	return OK;
}
