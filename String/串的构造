#include<iostream>
#include<stdio.h>
#include<stdlib.h>
typedef struct String{
	struct String() :ch(NULL), length(0){};  //初始化
	char *ch;
	int length;
}String;
bool StrAssign(String &s,char*ch){
	int n = 0;
	if (s.ch)
		free(s.ch);
	while (ch[n]){ ++n; }//得到ch的长度
	s.ch = (char*)malloc(n *sizeof(char));
	if (!s.ch)
		exit(OVERFLOW);
	for (int i = 0; i < n; ++i)
		s.ch[i] = ch[i];
	s.length = n;
	return true;
}
bool StrCopy(String &s, String &t){
	if (s.ch)
		free(s.ch);
	s.ch = (char*)malloc(t.length *sizeof(char));
	if (!s.ch)
		exit(OVERFLOW);
	for (int i = 0; i < t.length;++i)
		s.ch[i] =t.ch[i];
	s.length =t.length;
	return true;
}
int  StrLength(String &s){
	return s.length;
}
bool SubString(String &sub,String &s,int pos,int len){
	int j = 0;
	if (pos<0 || pos>s.length||len<0 || len>(s.length - pos + 1))
		return false;
	if (sub.ch) free(sub.ch);
	sub.ch = (char*)malloc((len+1)*sizeof(char));
	if (!sub.ch) exit(OVERFLOW);
	for (int i = pos; i < pos + len ; ++i){
		sub.ch[j] = s.ch[i];
		++j;
	}
	sub.length = len;
	return true;
}
int SubCompare(String &s, String &t){
	int n = s.length, m = t.length;
	if (n == m){
		for (int i = 0; i < n; i++){
			if (s.ch[i]>t.ch[i])
				return 1;
			else if (s.ch[i]<t.ch[i])
				return -1;
		}
		return 0;
	}
	else if (n>m){
		for (int i = 0; i < m; i++){
			if (s.ch[i]>t.ch[i])
				return 1;
			else if (s.ch[i]<t.ch[i])
				return -1;
			else return 1;
		}
	}
	else{
		for (int i = 0; i < n; i++){
			if (s.ch[i]>t.ch[i])
				return 1;
			else if (s.ch[i]<t.ch[i])
				return -1;
			else return -1;
		}
	}
}
bool StrEmpty(String &s){ if (s.ch)return false; else return true; }
bool ClearString(String &s){
	if (!s.ch){
		printf("字符串已为空！\n");
		return false;
	}
    free(s.ch);//s.ch直接分配了字符串的总空间，即只需释放掉s.ch即可
	s.ch = NULL;
	return true;
}
int Index(String &s, String &t, int pos){
	String sub;
	if (pos > 0){
		int n = s.length;
		int m = t.length;
		int i = pos;
		while (i < n - m + 1){
			//pos+m-1<n
			SubString(sub, s, i, m);
			if (SubCompare(sub, t))
				++i;
			else
				return i;
		}
		return 0;  //没有与t相等的子串
	}
}
void show(String &s){
	if (!s.ch){
		printf("字符串已为空！\n");
	}
	for (int i = 0; i < s.length;i++)
		printf("%c\n", s.ch[i]);
}
int main(){ 
	char *ch = "helloworld",*ch1 = "hello",*ch2 = "world"; //定义时解引用符每个变量都要有
	String s, t,sub; int pos = 2;
	StrAssign(s, ch);
	//StrCopy(t, s);
	StrAssign(t, ch2);
	SubString(sub, s, pos, t.length);
	//printf("%d\n", SubCompare(s,t));
	//ClearString(t);
	//show(sub);
	//int i = Index(s, t, pos);
	printf("%d\n", Index(s,t,pos));
	return 0; 
}
